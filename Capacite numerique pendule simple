###########################################
## Pendule simple ##
###########################################

from pylab import * # numpy est chargé avec l'alias np
from scipy.integrate import odeint

#Algorithme d'EULER explicite
def euler_vect(f,z0,t):
    n = len(t)
    z = [z0]
    for i in range (n-1):
        p = t[i+1]-t[i]
        z = z + [z[i] + p*f(z[i],t[i])]
    return array(z)

###########################################
## question a
###########################################

# Définition des paramètres
l=0.10                                 # Longueur du pendule en m
g=9.81                                 # Champ de pesanteur en m/s
w0=sqrt(g/l)                           # Pulsation propre en rad/s
T0=2*pi/w0                             # Période des petites oscillations en s

#Définition de la fonction F associée au pendule simple
def f(z,t) :
    return array([z[1], -w0**2*sin(z[0])])

# Définition de la base de temps
t0, t1 = 0, 3 * T0
p = T0 / 100
T = linspace(t0, t1, int((t1 - t0) / p) + 1)

# Calcul de la solution par la méthode d'Euler
Y0 = [pi/12,0] # Conditions initiales
Y=euler_vect(f,Y0,T)

# Tracé de la solution par méthode d'Euler
plt.plot(T, Y[:, 0], label="Euler")
plt.xlabel('temps(s)')
plt.ylabel('theta(rad)')
plt.title('Pendule simple')
plt.show()

###########################################
## question b
###########################################
# Calcul de la solution dans l'approximation linéaire
def solan(z0, t):
    return z0[0]*cos(w0*t) + z0[1] / w0*sin(w0*t)

#Représentation graphique
plt.plot(T, solan(Y0, T), ls="dashed", label="approximation linéaire")
plt.plot(T, Y[:, 0], label="Euler")
plt.legend()
plt.xlabel('temps(s)')
plt.ylabel('theta(rad)')
plt.title('Pendule simple')
plt.show()

###########################################
## question c
###########################################
# Calcul de la solution avec odeint
Y2 = np.array(odeint(f, Y0, T))

#Représentation graphique
plt.plot(T, Y2[:, 0], label="odeint")
plt.plot(T, solan(Y0, T), ls="dashed", label="approximation linéaire")
plt.plot(T, Y[:, 0], label="Euler")
plt.xlabel('temps(s)')
plt.ylabel('theta(rad)')
plt.title('Pendule simple')
plt.legend()
plt.show()

###########################################
## question d
###########################################
plt.figure(3, figsize=(10, 7))
plt.grid(True)
plt.gca().set_axisbelow(True)

wc = 6
Y0[0] = 0
for i in range(n, 0, -1):
    Y0[1] = i*wc / 7
    Y = np.array(odeint(f, Y0, T))
    plt.plot(T, Y[:, 0], label=rf"{i=}")

plt.xlabel('temps(s)')
plt.ylabel('theta(rad)')
plt.title('Pendule simple')
plt.legend()
plt.show()
